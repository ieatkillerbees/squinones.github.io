<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>A Marginally Useful Blog</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>php|tek 2014 Retrospective</title>
				<description>&lt;h2 id=&quot;phptek-the-hottest-thing-in-chicago-thats-not-a-giant-metal-space-bean&quot;&gt;php|tek: The Hottest Thing in Chicago (that’s not a giant metal space bean)&lt;/h2&gt;
&lt;p&gt;So, php|tek has come and gone and everyone is hopefully starting to catch up on their sleep. This was my second visit to tek and while it was delightfully familiar, the conference had an entirely different energy compared to last year. From what I hear, this was the largest tek yet, and maybe it was the increased attendance that is responsible for the very different feel. During lunch breaks, the large central atrium at the venue was totally abuzz and each table was packed and lively with conversation. The atrium was pretty well packed, in fact, well in to the night with attendees talking and playing games. Not only was the conference well attended, but I understand that roughly half of the attendees were coming to tek for the very first time. In keeping with the conference’s Star Trek/SciFi theme, each attendee received a color-coded shirt: yellow for speakers (Captains in the chromatic language of the original Star Trek series), blue for repeat attendees, and red for first-timers. The venue was very, very well represented with red shirts!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/BoMTi_YCIAATOHR.jpg&quot; alt=&quot;T-Shirts! (credit: Tim Lytle, @tjlytle)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-community-that-cares&quot;&gt;A Community That Cares&lt;/h2&gt;
&lt;p&gt;Among the people I talked to, the unqualified highlight of tek14 was the Mental Health Summit held the first night of the regular conference. Working with &lt;a href=&quot;http://www.engineyard.com&quot;&gt;Engine Yard&lt;/a&gt; as part of their awesome &lt;a href=&quot;http://prompt.engineyard.com/&quot;&gt;Prompt&lt;/a&gt; initiative, tek brought together four members of the community to help start a frank and honest discussion about mental health issues. &lt;a href=&quot;https://twitter.com/funkatron&quot;&gt;Ed Finkler&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/greggyb&quot;&gt;Greg Baugues&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/benmarks&quot;&gt;Ben Marks&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/paddyforan&quot;&gt;Paddy Foran&lt;/a&gt; each shared some of their own experiences. I was privileged to attend Ed’s Open Sourcing Mental Health presentation last year, and it’s wonderful to see that our community is giving mental health the importance that it deserves. I won’t diminish what they shared by attempting to reproduce it here, but nearly all of us have at some point been touched by mental illness, our own or that of someone we care for. Instead I’ll pass on Ed’s request that you please visit &lt;a href=&quot;http://www.mentalhealthfirstaid.org/&quot;&gt;http://www.mentalhealthfirstaid.org&lt;/a&gt;.&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;open-spaces&quot;&gt;Open Spaces&lt;/h2&gt;
&lt;p&gt;There was a different spin on attendee-driven content this year with Open Spaces. Attendees were invited to host their own hour-long round table discussions about whatever topics they wished. Held in the alcove outside the main ballroom, Open Spaces was a comfy little venue that played host to a wide variety of discussions throughout the week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://in2it.be&quot;&gt;&lt;img src=&quot;/assets/2014-05-21+20.31.55.jpg&quot; alt=&quot;Credit: Michelangelo van Dam, http://in2it.be&quot; width=&quot;214&quot; height=&quot;190&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;phpworld&quot;&gt;php[world]&lt;/h2&gt;
&lt;p&gt;At the conference closing, &lt;a href=&quot;https://twitter.com/EliW&quot;&gt;Eli White&lt;/a&gt; announced the php[architect] crew will be spinning up a new conference this November. &lt;a href=&quot;https://world.phparch.com/&quot;&gt;php[world]&lt;/a&gt; will be held in my own home town of Washington, DC, so I have to admit I feel a little bit of ownership-by-proximity. DC is a great little tech town and I&#39;ve been saying for a while that we need our own conference. World will bring in all the disparate PHP sub-communities-- WordPress, Drupal, Joomla, etc-- together in one fantastic venue. If world is half the conference that tek is, I know it will be absolutely amazing!&lt;/p&gt;
&lt;h2&gt;That&#39;s a Wrap&lt;/h2&gt;
&lt;p&gt;Huge, massive thanks to &lt;a href=&quot;http://twitter.com/EliW&quot;&gt;Eli White&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/SandyS1&quot;&gt;Sandy Smith&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/e3BethT&quot;&gt;Beth Tucker Long&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/omerida&quot;&gt;Oscar Merida&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/kevinbruce&quot;&gt;Kevin Bruce&lt;/a&gt;, and &lt;a href=&quot;http://twitter.com/CattyCreations&quot;&gt;Heather White&lt;/a&gt; for organizing tek and for, along with all the volunteers, making the whole thing run so smoothly. I cannot wait for next year (though at least there&#39;s world to look forward to now!)&lt;/p&gt;
</description>
				<pubDate>Mon, 26 May 2014 03:35:46 -0400</pubDate>
				<link>/community/2014/05/26/phptek-2014-retrospective.html</link>
				<guid isPermaLink="true">/community/2014/05/26/phptek-2014-retrospective.html</guid>
			</item>
		
			<item>
				<title>Nomad is coming!</title>
				<description>&lt;p&gt;I&#39;ve been in the software engineering business for a long time, but until I was introduced to the PHP community, I never really cared to engage in the social aspect of this profession. I really feel that the PHP community is something unique. It&#39;s rare to find a community that stands on the firm foundation of long-established friendships that is also so incredibly welcoming to newcomers.&lt;/p&gt;
&lt;p&gt;I am still staggered by the friendship and support that has been given to me by people in the PHP world. The commitment that people have in the PHP community to raise one another up and to share their triumphs and frustrations, should be a model towards which every tech community should aspire.&lt;/p&gt;
&lt;p&gt;One great way to get involved is to attend Nomad PHP, a monthly on-line miniconf where devs come together to share their knowledge and experience. I am immeasurably proud to have the opportunity to team up with Nomad PHP this month and share something that I&#39;m very passionate about. &lt;a href=&quot;http://nomadphp.com/2014/01/24/april-2014/&quot;&gt;Please join me April 17th at 8pm CDT to talk about the REST API, where it came from and where it&#39;s going, and how you can build better ones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;REST is more than just a buzzword in a recruiting email. It describes a pattern for organizing and delivering content that is tremendously appealing because of of its relative simplicity and low overhead. Understanding where the idea of REST comes from, and how established and emerging standards are used to construct REST APIs, will give you the edge you need to build highly effective APIs that are a breeze to scale, test, and maintain. You definitely don&#39;t want to miss it!&lt;/p&gt;
</description>
				<pubDate>Sat, 29 Mar 2014 20:00:51 -0400</pubDate>
				<link>/2014/03/29/nomad-coming.html</link>
				<guid isPermaLink="true">/2014/03/29/nomad-coming.html</guid>
			</item>
		
			<item>
				<title>Project Laravel -- Session 1: First impressions</title>
				<description>&lt;p&gt;I was super excited when I found a couple of free hours to finally sit down with Laravel and kick off my little blog project. That two hour time box turned out to be pretty important to this effort. I hit up &lt;a href=&quot;http://puphpet.com&quot;&gt;puphpet.com&lt;/a&gt; to get a quick-and-dirty little debian development server running and loaded up the Laravel &lt;a href=&quot;http://laravel.com/docs/quick&quot;&gt;quick start&lt;/a&gt;. Unfortunately I glossed over the very clear instructions about the necessary permissions for the app/storage path and lost about 10 minutes trying to figure out why I was white screening, but from the moment I sat down to the point where I had a functioning skeleton installed totaled maybe 20 or 25 minutes. I started in on my first goal, a simple database-backed authentication system.&lt;/p&gt;
&lt;p&gt;I won&#39;t go in to details on a topic as well-trod as that, but I think it speaks extremely highly of Laravel&#39;s approachability that I was able to build out a reasonably rich authentication system in a little more than an hour, including command-line tools to provision and manage users. I&#39;ve worked in a number of PHP frameworks large and small, from Codeigniter, Fuel, and Yii to Zend and Symfony, but I have never felt as immediately productive in any of them as I did sitting down with Laravel.  That alone goes a huge way to explaining how this framework has managed to enchant such a huge segment of the greater PHP community. The prospect of the drop-in structure of a framework without the steep learning curve is incredibly alluring.&lt;/p&gt;
&lt;p&gt;Almost alluring enough to offset some of the things that I wasn&#39;t quite as comfortable with. I want to say, I went in to this determined to give facades a fair shot but they didn&#39;t make a great impression. I am the kind of person who likes to know what&#39;s going on under the hood and facades seemed determined to get in my way. I don&#39;t like feeling frustrated trying to find how something is implemented, and I found myself in that position a handful of times during this first exposure and it left a definite bad taste in my mouth. Maybe it&#39;s just my lack of familiarity with the framework, or maybe as a python dev, I just have a bias towards the explicit over the implicit, but if it weren&#39;t for the fact that facades are optional, I think my experiment might have ended right then and there.&lt;/p&gt;
&lt;p&gt;So, the takeaway from my first brush with Laravel is that it&#39;s a very welcoming piece of technology that invites you to step in and immediately start creating stuff, which is awesome. I&#39;d love for the non-facade style to have a more prominent place in the docs. The idea is explained very succinctly by &lt;a href=&quot;http://taylorotwell.com/&quot;&gt;Taylor Otwell himself on his personal blog&lt;/a&gt;, but I think it would do a lot to quell some of the criticism-- not to mention, make the framework a bit more welcoming to people, like me, who just reflexively distrust &quot;magic&quot;--  if the DIC itself were more visibly in the docs.&lt;/p&gt;
&lt;p&gt;Next session I&#39;ll be building my content management back-end and wiring up mongo. I&#39;m really looking forward to doing some real work with Laravel at last!&lt;/p&gt;
</description>
				<pubDate>Sat, 08 Feb 2014 23:12:37 -0500</pubDate>
				<link>/project%20laravel/2014/02/08/project-laravel-first-impressions.html</link>
				<guid isPermaLink="true">/project%20laravel/2014/02/08/project-laravel-first-impressions.html</guid>
			</item>
		
			<item>
				<title>Jamming with the Feds</title>
				<description>&lt;p&gt;&quot;What on Earth is a Data Jam?&quot; is precisely the question I asked myself yesterday afternoon when an email inviting me to participate in a White House Data Jam on STEM Workforce Quality, Flow, and Diversity landed in my inbox. Reading through some of the supplied documents made things only a little bit clearer. Despite the confusion and misgivings, I figured being asked if I want to come to a White House &lt;em&gt;anything&lt;/em&gt; is a good enough reason to apply the Jim Halpert maxim and simply reply, &quot;absolutely, I do.&quot;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter&quot; title=&quot;Getting to work at the White House&quot; alt=&quot;Getting to work at the White House&quot; src=&quot;assets/Beq5lvAIgAAEWUv.jpg&quot; width=&quot;176&quot; height=&quot;234&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So that&#39;s why at a shockingly early and frigid hour this morning, I found myself trudging down a quiet street in downtown Washington on my way to the Eisenhower Executive Office Building. After clearing security, I made my way upstairs to a large conference room, poured myself a cup of coffee (sweetened with splenda from yellow paper packets emblazoned with the Seal of the President of the United states!), and took a seat among a sea of a bunch of very, very smart people.&lt;/p&gt;
&lt;p&gt;It was through the introduction that the point of all this finally became clear. I was aware of the Obama Administration&#39;s support for government open data initiatives, which I praised in a very detached, &quot;hey, open data&#39;s cool&quot; kinda way, but I was not at all in tune with the very real ways in which the Federal government is trying to put this stuff in to practice.&lt;/p&gt;
&lt;p&gt;One of the big problems, as any open data advocate can tell you, is that governments amass just gigantic quantities of data in the course of their day-to-day... governing, but there aren&#39;t often clear ways to use it or even consistently access it. This is data, of course, that&#39;s held by the government in trust for the benefit of the the people as a whole, but it really doesn&#39;t do a lot of good to anyone if it&#39;s locked away in some database that no one&#39;s ever heard of.&lt;/p&gt;
&lt;p&gt;And so this is where Data Jams come in. I think we&#39;re all so conditioned to see the government as hopelessly bureaucratic and glacial that something like a Data Jam is actually a little bit shocking. It&#39;s a simple concept: get a bunch of government stewards of various datasets, potential consumers of that data, entrepreneurs and other private sector people in closely related fields, and some software developers together in a room and come up with 5 or 10 really good, actionable ideas for making that data work for the American people.&lt;/p&gt;
&lt;p&gt;Since I&#39;m not so sure about the etiquette of these things, and some folks were already a little on edge having someone from POLITICO hanging around**, I won&#39;t go too deeply in to the proceedings, but I have to say that I was amazed by what we accomplished in 6 short hours together. Brainstorming with a neuroscientist, a senior manager in the Federal service, an open data specialist, other developers, and human resources gurus really stretched my brain out in weird ways that I have to say I really enjoyed. And coming away from it, I feel like we actually did hit on some good, practical ideas that have the potential to make the Federal service, and the American workforce in general, just a tiny bit better.&lt;/p&gt;
&lt;p&gt;I guess most importantly to me, it was a reminder that we can all serve society in our own ways. Not all of us are meant to be soldiers or politicians or diplomats. I&#39;m just simple programmer who really likes building cool APIs, and if I can help, anyone can.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;**I feel the need to make a strong disclaimer here that while I am employed by POLITICO, I&#39;m in no way a journalist and I have no pretensions of being one. I have a tremendous amount of respect for my colleagues in the journalism organization at POLITICO and while I&#39;m always proud to represent the company, my participation today was primarily as a member of the broader technology community.&lt;/em&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 24 Jan 2014 05:06:05 -0500</pubDate>
				<link>/community/2014/01/24/jamming-feds.html</link>
				<guid isPermaLink="true">/community/2014/01/24/jamming-feds.html</guid>
			</item>
		
			<item>
				<title>Project Laravel</title>
				<description>&lt;p&gt;I&#39;ve always been pretty candid about the fact that I&#39;m not a big fan of frameworks. I think they&#39;re great for prototyping and for very simple applications. In my experience, though, whatever time you save starting your application up is lost when the inevitable quirky requirements and unexpected complexities force you to eventually extricate parts of your app from the framework you built it in.&lt;/p&gt;
&lt;p&gt;That said, I have a number of friends who happen to be big Laravel fans and I&#39;ve told most of them, at one point or another, that I&#39;m willing to give it an honest chance before I write it off completely (like most other &quot;full-stack&quot; frameworks.) &lt;a title=&quot;Patryk Kruk&quot; href=&quot;http://twitter.com/patkruk&quot;&gt;Patryk Kruk&lt;/a&gt;, one of my colleagues at &lt;a title=&quot;Politico&quot; href=&quot;http://www.politico.com&quot;&gt;POLITICO&lt;/a&gt;, is a particularly persistent voice in my ear both to give Laravel a shot and to actually update my blog on occasion, so I dedicate this project to him.&lt;/p&gt;
&lt;p&gt;This site is sitting in a dusty corner of a shared hosting account that I&#39;ve had sitting around for years. It&#39;s well past time to modernize and move it. That&#39;s my project: rebuild this personal site (in my spare time between work, personal projects, and other commitments) using Laravel and move it off this shared hosting account that I probably should have closed during the Bush administration.&lt;/p&gt;
&lt;h3&gt;The Parameters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use all the &quot;main&quot; features of Laravel (i.e. Eloquent, facades, etc.) at least once.&lt;/li&gt;
&lt;li&gt;Gotta have serviceable blogging functionality that isn&#39;t a complete PITA to use.&lt;/li&gt;
&lt;li&gt;Blog my progress at least weekly, even if it&#39;s just to say I didn&#39;t do anything.&lt;/li&gt;
&lt;li&gt;Make the code freely available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s all there is to it, really. At least I&#39;ll finally be able to get the Laravel fans in my life off my back. &lt;/p&gt;
&lt;p&gt;Or maybe I&#39;ll end up joining them?&lt;/p&gt;
</description>
				<pubDate>Tue, 21 Jan 2014 22:17:12 -0500</pubDate>
				<link>/development/project%20laravel/2014/01/21/project-laravel.html</link>
				<guid isPermaLink="true">/development/project%20laravel/2014/01/21/project-laravel.html</guid>
			</item>
		
			<item>
				<title>SkiPHP Talk Slides</title>
				<description>&lt;p&gt;SkiPHP has been a blast. The organizers have done a fantastic job putting together an amazing conference!&lt;/p&gt;
&lt;p&gt;If you&#39;re interested in viewing the slides from my talks, they&#39;re available on speakerdeck, so please check them out!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/squinones/demystifying-the-rest-api&quot; title=&quot;Demystifying the REST API&quot;&gt;Demystifying the REST API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://speakerdeck.com/squinones/designing-service-architectures-for-the-cloud&quot; title=&quot;Designing Service Architectures for the Cloud&quot;&gt;Designing Service Architectures for the Cloud&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 18 Jan 2014 22:31:17 -0500</pubDate>
				<link>/community/2014/01/18/skiphp-talk-slides.html</link>
				<guid isPermaLink="true">/community/2014/01/18/skiphp-talk-slides.html</guid>
			</item>
		
			<item>
				<title>Juggle Chainsaws, Not Types</title>
				<description>&lt;p&gt;No matter how popular an activity it is, I really don&#39;t like to bash on PHP. Every language has its flaws when you look closely enough, and if PHP wears its idiosyncrasies a little closer to the surface than most, I think it makes up for it in other ways. PHP&#39;s handling of types, however, is confusing at best and at worst completely deranged.&lt;/p&gt;
&lt;p&gt;I&#39;ve seen intercity rail schedules that can&#39;t hold a candle to PHP&#39;s &lt;a href=&quot;http://us1.php.net/types.comparisons&quot;&gt;type comparison tables&lt;/a&gt;. The bizarre and unexpected behaviors that can result from a non-strict comparison has all but rendered the equality operator (==) useless. The typical advice from PHP master to PHP neophyte is, always check for identicality (===) unless you&#39;re very sure what you&#39;re doing.&lt;/p&gt;
&lt;p&gt;In fact, as part of our pre-screening process at Politico, we often ask PHP developer candidates to explain why the following expression evaluates as true.&lt;/p&gt;
&lt;pre&gt;(&quot;politico&quot; == 0);&lt;/pre&gt;
&lt;p&gt;This question probably wont stump a PHP developer with any significant experience. If you manage to code in PHP for more than a few months without running face-first in to this issue, you might not be trying hard enough.&lt;/p&gt;
&lt;p&gt;PHP is weakly typed in much the same way that water is slightly dry. When faced with the expression above, the interpreter tries to make sense of things by converting the string in to a number, following a single and actually &lt;a href=&quot;http://www.php.net/manual/en/language.types.string.php#language.types.string.conversion&quot;&gt;quite well documented set of rules.&lt;/a&gt; To put it simply, if the string contains a &#39;.&#39;, or the letter &#39;e&#39;, PHP will attempt to turn it in to a float. Otherwise, it turns it in to an integer. If the string starts with &quot;valid numeric data,&quot; those numbers will be used as a value of the new integer (e.g. (int) &quot;123foo&quot; -&amp;gt; 123). If the string doesn&#39;t start with a number, the value will be 0. The literal string &quot;politico&quot; starts with a &#39;p&#39;, which is not a number, and so the interpreter rewrites the above expression like so:&lt;/p&gt;
&lt;pre&gt;(0 == 0);&lt;/pre&gt;
&lt;p&gt;The obvious second half of that question is, how do you make PHP give you an answer that isn&#39;t quite as... insane? You use the special identicality operator (===), more commonly called the triple-equal. This operator compares the types of the values in the expression, and if they don&#39;t match, it doesn&#39;t go through the whole circus act and just returns false.&lt;/p&gt;
&lt;p&gt;Cute, right? Maybe until you realize that this behavior happens to catch a lot of unsuspecting programmers, especially ones who are new to the profession. Sometimes it creates subtle and hard-to-reproduce bugs, and sometimes it creates &lt;a href=&quot;http://en.securitylab.ru/lab/PT-2012-29&quot;&gt;serious vulnerabilities&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once in a while, it&#39;ll even catch a more experienced programmer.&lt;/p&gt;
&lt;p&gt;I was recently implementing a fairly simple class with a setter method. The method accepts one argument and checks to see if it is in a list of allowed arguments before setting a protected property. If the argument is not in the list of allowed arguments, an exception is thrown. These arguments are configuration options that are generally expressed through the use of pre-defined constants and our code is merely storing the value.&lt;/p&gt;
&lt;pre&gt;public function setFoo($foo)
{
    $validOptions = [VALID_CONSTANT_A, VALID_CONSTANT_B];
    if (!in_array($foo, $validOptions)) { 
        throw new InvalidArgumentException(&quot;foo must be one of: &quot; . implode(&quot;, &quot;, $validOptions)); 
    } 
    $this-&gt;foo = $foo; 
}&lt;/pre&gt;
&lt;p&gt;Even for a setter method, this is pretty unremarkable. Yet when we run our unit tests, we get an interesting failure. Our test that passes in an invalid argument expects to see an exception, but it doesn&#39;t. In fact, this method accepts almost any string as valid. And despite my being way more familiar with PHP&#39;s weird type handling than I really want to be, it still took me several minutes to figure out what was going on here.&lt;/p&gt;
&lt;p&gt;Those constants are a form of abstraction, hiding an implementation detail of one of our class&#39;s dependencies that we shouldn&#39;t have to care about. If the dependency ever decides to change that implementation, using the constants means we don&#39;t have to alter our code to keep up. But ignorance is often misguided bliss because VALID_CONSTANT_A is actually set to the integer 0, and by default, the in_array function doesn&#39;t do a strict, type-safe comparison.&lt;/p&gt;
&lt;p&gt;Let&#39;s make a quick fix...&lt;/p&gt;
&lt;pre&gt;public function setFoo($foo)
{
    $validOptions = [VALID_CONSTANT_A, VALID_CONSTANT_B];
    if (!in_array($foo, $validOptions, true)) { 
        throw new InvalidArgumentException(&quot;foo must be one of: &quot; . implode(&quot;, &quot;, $validOptions)); 
    } 
    $this-&gt;foo = $foo; 
}&lt;/pre&gt;
&lt;p&gt;In case you didn&#39;t notice the change, in_array accepts a third argument, a boolean which forces strict comparison when set to true. Now our unit tests pass and our crisis is averted.&lt;/p&gt;
&lt;p&gt;Maybe there&#39;s a parable here. It&#39;s a pretty vivid illustration of why unit tests are worth our time and effort, if nothing else. Still, it nags at me. At the very best, silly things like this eat up valuable time. I don&#39;t even want to consider the very worst.&lt;/p&gt;
</description>
				<pubDate>Wed, 20 Nov 2013 05:28:08 -0500</pubDate>
				<link>/development/2013/11/20/juggle-chainsaws.html</link>
				<guid isPermaLink="true">/development/2013/11/20/juggle-chainsaws.html</guid>
			</item>
		
			<item>
				<title>Speaking at Ski PHP, Jan 17th & 18th, 2013</title>
				<description>&lt;p&gt;I&#39;ll be talking about Service Architectures and REST APIs. Should be exciting! Hope to see you there!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.skiphp.com/attend/schedule&quot;&gt;https://www.skiphp.com/attend/schedule&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 12 Sep 2013 17:08:01 -0400</pubDate>
				<link>/2013/09/12/speaking-ski-php-jan-17th-18th-2013.html</link>
				<guid isPermaLink="true">/2013/09/12/speaking-ski-php-jan-17th-18th-2013.html</guid>
			</item>
		
			<item>
				<title>Pushing Bamboo Notifications to Datadog</title>
				<description>&lt;p&gt;In my last post, I mentioned that where I work, we settled on Bamboo as our continuous integration solution. I love Bamboo, but its built-in notification features are pretty lacking. In fact, your only options out of the box are XMPP messaging (with no conferencing, so meh) or email (yech).&lt;/p&gt;
&lt;h2&gt;I &amp;lt;3 Datadog&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://datadoghq.com&quot;&gt;&lt;img class=&quot;aligncenter&quot; alt=&quot;&quot; src=&quot;assets/dd_logo_white_trim-300.png&quot; width=&quot;300&quot; height=&quot;62&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another tool we use at &lt;a href=&quot;http://politico.com&quot; target=&quot;_blank&quot;&gt;Politico&lt;/a&gt; is &lt;a href=&quot;http://datadoghq.com&quot; target=&quot;_blank&quot;&gt;Datadog&lt;/a&gt;. If you&#39;re not familiar with it, Datadog is an amazing hosted devops tool that combines rich visualization of metrics data with very nifty event streams and quasi-social groupwarish features. Datadog is changing how devs and system admins work in our environment, and we&#39;re increasingly looking for ways that it can make our lives better.&lt;/p&gt;
&lt;p&gt;Datadog is our central event management platform, and having our build events there cuts Bamboo off from the rest of our notification pipeline, and that&#39;s just the pits. Over the past day or two, the Politico Tech Lab has been abuzz with increasingly Rube-Goldbergian ideas for how to solve what boils down to a very simple problem: how do we push a tiny blob of text across the Internet. Eventually we came to the idea of setting up an XMPP server that both Bamboo and our IRC bot could long in to, with the goal of teaching the IRC bot to forward messages to Datadog&#39;s API. Yeah, silly.&lt;/p&gt;
&lt;p&gt;Then, suddenly, the clouds parted and the heavenly chorus picked up and the solution presented itself as clear as crystal: python.&lt;/p&gt;
&lt;h2&gt;Python to the Rescue&lt;/h2&gt;
&lt;p&gt;Python&#39;s standard library includes a simple, but very functional SMTP server implementation. Yeah, that&#39;s right, we built a mail server.&lt;/p&gt;
&lt;p&gt;The code&#39;s very short, but we can take a quick tour.&lt;/p&gt;
&lt;pre&gt;import asyncore
import email
import socket
from dogapi import dog_http_api as api
from smtpd import SMTPServer&lt;/pre&gt;
&lt;p&gt;We&#39;ll need the basic asynchronous socket server module, email (to tame Bamboo&#39;s HTML mishmash), the socket module, the basic SMTPServer module from smtpd, and Datadog&#39;s API, which is available from the cheese shop with a simple &#39;pip install dogapi&#39;.&lt;/p&gt;
&lt;pre&gt;class Server(SMTPServer):
    def __init__(self, dd_api_keys, host=&quot;127.0.0.1&quot;, port=4242):
        self.dd_api_keys = dd_api_keys
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)&lt;/pre&gt;
&lt;p&gt;Now we just have to extend the SMTPServer class. We&#39;ll need to take in some datadog api keys (as a tuple, in this case), as well as an address to bind to and a port to listen on. SMTPServer itself extends asyncore.dispatcher, so we need to init correctly before setting up a socket to listen on.&lt;/p&gt;
&lt;pre&gt;    def process_message(self, peer, sender, recipients, body):
        api_key, app_key = self.dd_api_keys

        message = email.message_from_string(data)
        title   = &quot; &quot;.join(self.message[&quot;subject&quot;].split(&quot;\n&quot;))
        text    = message.get_payload(0)

        api.event(title, text)&lt;/pre&gt;
&lt;p&gt;The method &#39;process_message&#39; will be called any time a mail client delivers a message to our server for delivery. We&#39;ll get information about the peer as a standard (addr,port) tuple, the sender&#39;s address as a string, a list of recipient email addresses, and the message body also as a string.&lt;/p&gt;
&lt;p&gt;At this point, we go ahead and unpack those api keys. The python email module will break up the raw email message enough to make things simpler. We can easily grab the subject to use as our event title. Bamboo sends multipart messages with the plaintext body in the first part, so we just use get_payload to pull out the 0th index.&lt;/p&gt;
&lt;p&gt;Calling api.event will fire the event off to Datadog.&lt;/p&gt;
&lt;pre&gt;if __name__ == &#39;__main__&#39;:
    apikey = 
    appkey = 
    server = Server((apikey, appkey))
    asyncore.loop()&lt;/pre&gt;
&lt;p&gt;And last, we instantiate our server and start our little server up.&lt;/p&gt;
&lt;h2&gt;Wrapping it Up&lt;/h2&gt;
&lt;p&gt;In our actual implementation, we ended up massaging this data a bit more to clean things up and make the events conform more to our own internal needs and desires. This code is what remains after that stuff has been chopped out, so NB, I haven&#39;t even attempted to execute it and may not run as is. It should be enough to get you started on your own sneaky little SMTP server&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://datadoghq.com&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;line-height: 13px;&quot;&gt;Check out Datadog&#39;s website and free trial. Seriously, these guys are awesome!&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/squinones/5881996&quot;&gt;Grab the (possibly) working code!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Thu, 27 Jun 2013 21:22:50 -0400</pubDate>
				<link>/devops/2013/06/27/push-bamboo-notifications-to-datadog.html</link>
				<guid isPermaLink="true">/devops/2013/06/27/push-bamboo-notifications-to-datadog.html</guid>
			</item>
		
			<item>
				<title>Why you should consider Continuous Integration</title>
				<description>&lt;p&gt;Last night at &lt;a title=&quot;DCPHP Meetup&quot; href=&quot;http://www.meetup.com/DC-PHP&quot; target=&quot;_blank&quot;&gt;DCPHP&lt;/a&gt;, I gave a short &quot;lightning&quot; talk on &lt;a href=&quot;https://speakerdeck.com/squinones/continuous-integration-and-deployment-with-php&quot; target=&quot;_blank&quot;&gt;Continuous Integration and Deployment&lt;/a&gt; in the context of PHP applications. I really like the lightning talk format as it forces you to focus on the meat of your topic-- there&#39;s no time to get distracted by details. As great as that is, though, I wanted to expand a little on the subject and touch on some of the details that I couldn&#39;t include in my presentation.&lt;/p&gt;
&lt;h3&gt;What is Continuous Integration?&lt;/h3&gt;
&lt;p&gt;Continuous Integration is a grand-sounding name for a very simple concept. Every time you make a change to your application&#39;s code (or, at least, on a very frequent and recurring basis), you build and test the entire application. Each change is integrated in to the application immediately.&lt;/p&gt;
&lt;p&gt;Of course building and testing your entire application after each and every commit seems like a big task, and it is. Because we&#39;re building so frequently, it&#39;s essential that our building and testing happens automatically. Human intervention in the process has to be limited only to occasions when a build fails. When everything builds successfully, it should happen in the background like magic.&lt;/p&gt;
&lt;h3&gt;What&#39;s Wrong With Traditional Build/Deployment Practices?&lt;/h3&gt;
&lt;p&gt;To answer that question, it&#39;s important that we think about everything that usually goes in to building and deploying an application, specifically a web-facing PHP application. Very often there are configuration files that need to be modified. Bootstrap scripts and autoloaders need to be updated. Sometimes we find ourselves writing scripts to move files around, or update databases.&lt;/p&gt;
&lt;p&gt;Hopefully part of the process involves running some kind of automated tests.&lt;/p&gt;
&lt;p&gt;And once all of that is done, and it&#39;s time to deploy, we find ourselves staring at an FTP client. Often we use our VCS as a deployment tool, which is great because typing &#39;svn update&#39; is so simple, but how many of you have ever left a .git directory or some other VCS artifact hanging out there for the world to see?&lt;/p&gt;
&lt;p&gt;Sometimes we&#39;re stuck copying and editing files by hand in production, which is the kind of thing that gives me nightmares.&lt;/p&gt;
&lt;p&gt;To put it bluntly, building and pushing by hand sucks. It&#39;s extremely error-prone and however unintuitive it may sound, the more you do it, the more likely you are to screw something up. When it&#39;s two in the morning and you&#39;re tired and you&#39;ve done it a million times before, your attention wanders. You forget a step. You push the wrong thing out to production or forget to run a database update script and now you have a fire on your hands. Several years ago I was manually moving a production application between two servers for routine maintenance. It was something I had done hundreds of times before. I forgot to scp a file over and brought the system up on a month-old copy of the database. It took two days to set things straight again. That was a lesson I don&#39;t think I could ever forget.&lt;/p&gt;
&lt;p&gt;If that&#39;s not bad enough, doing it by hand encourages another kind of laziness. We&#39;re developers and when we see problems, it&#39;s in our nature to fix them. &quot;It&#39;s just a simple fix,&quot; we&#39;ll tell ourselves. Maybe no one&#39;s noticed it&#39;s broken yet and a quick edit to that one file will save the headache of a problem report in the morning. Maybe we&#39;ll remember to commit the change to the repo as well, or maybe in six weeks that bug will show its ugly face again the next time someone deploys the unedited version of the code from git.&lt;/p&gt;
&lt;h3&gt;There is a Better Way&lt;/h3&gt;
&lt;p&gt;Continuous Integration is one of the practices of Extreme Programming and Agile Development. When you think about it, it&#39;s a perfect fit. Agile development is all about short, tight iterations. User story, enhancement, build, release. Lather, rinse, repeat. Martin Fowler and Kent Beck first described CI back in the late 90s and &lt;a href=&quot;http://www.martinfowler.com/articles/continuousIntegration.html&quot; target=&quot;_blank&quot;&gt;Martin&#39;s original article&lt;/a&gt; is still essential reading for any team looking to adopt the practice.&lt;/p&gt;
&lt;p&gt;Before you can get started with CI, though, you need to prepare your codebase. If you don&#39;t have automated tests, you&#39;re going to need them. Going continuous relies on having confidence in the state of the application and the only way to build that confidence is through automated, repeatable tests.&lt;/p&gt;
&lt;p&gt;You&#39;re also going to need an environment that&#39;s as similar to production as is reasonably possible. Today, thanks to the ease of setting up virtual machines (what up, &lt;a href=&quot;http://vagrantup.com&quot; target=&quot;_blank&quot;&gt;vagrant&lt;/a&gt; and &lt;a href=&quot;http://puphpet.com&quot; target=&quot;_blank&quot;&gt;puphpet&lt;/a&gt;!?), there&#39;s no excuse to develop and test in Windows and then deploy on Linux anymore.&lt;/p&gt;
&lt;p&gt;Once your codebase is ready, it&#39;s time to start automating your builds. There are tons of tools out there to handle build automation, from ye olde make(1) to rake and phing and ant and maven and so on. I&#39;m personally a fan of phing (which is inspired by ant and php-focused), but feel free to use whatever you&#39;re most comfortable with.&lt;/p&gt;
&lt;p&gt;While you&#39;re evaluating build automation tools, don&#39;t forget about your databases! If you use an RDBMS and don&#39;t use any database migration tools, start! Database migration tools are like version control for your database, and they provide a framework for deploying database changes in a sane way. Many major PHP frameworks include a migration tool, and there are plenty of standalone tools like &lt;a href=&quot;http://dbdeploy.com/&quot; target=&quot;_blank&quot;&gt;dbdeploy&lt;/a&gt;, &lt;a href=&quot;http://www.liquibase.org/&quot; target=&quot;_blank&quot;&gt;liquibase&lt;/a&gt;, and &lt;a href=&quot;https://bitbucket.org/zzzeek/alembic&quot; target=&quot;_blank&quot;&gt;alembic&lt;/a&gt; (it&#39;s not just for python projects!).&lt;/p&gt;
&lt;h3&gt;Now the Real Decisions Have to be Made&lt;/h3&gt;
&lt;p&gt;What does a good build look like? How much code needs to be covered by tests before you feel confident to deploy? Should a build fail because a developer failed to follow a coding standard or forgot to add auto-documentation tags to her comments? Should a build be considered successful even if the number of findings from your static analysis tool doubled since the last release?&lt;/p&gt;
&lt;p&gt;These are questions that every team needs to answer for themselves, but when you think about it, having to consider what concrete, objective criteria need to be met before you deliver software is a great problem to have!&lt;/p&gt;
&lt;p&gt;This is a good time to start looking at Continuous Integration servers. There are tons of them out there, both free and commercial, but they all perform essentially the same functions. The CI server is the tool that&#39;s going to monitor your VCS repository for changes, run your build automation scripts, notify your team when things go poorly, and kick off your deployments.&lt;/p&gt;
&lt;p&gt;In a future article, we&#39;ll explore each of these stages in more detail, so stay tuned!&lt;/p&gt;
&lt;h3&gt;Further Reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.phing.info/docs/guide/trunk/chapters/GettingStarted.html&quot; target=&quot;_blank&quot;&gt;Phing Getting Started Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.martinfowler.com/articles/continuousIntegration.html&quot; target=&quot;_blank&quot;&gt;Continuous Integration by Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 12 Jun 2013 17:13:15 -0400</pubDate>
				<link>/devops/2013/06/12/continuous-integration-deployment-with-php.html</link>
				<guid isPermaLink="true">/devops/2013/06/12/continuous-integration-deployment-with-php.html</guid>
			</item>
		
	</channel>
</rss>
